#!/bin/sh -e
#---------------------------------------------------------------------
# run procenv with every argument
#---------------------------------------------------------------------

# FIXME: needs build-dep on expat
# FIXME: needs build-dep on perl
#
# FIXME: test for --indent=
# FIXME: test for --indent-char=
# FIXME: test for --separator=

die ()
{
	local msg="$*"
	echo "ERROR: $msg" >&2
	exit 1
}

msg ()
{
	local msg="$*"
	echo "INFO: $msg"
}

# Use full path to build binary
procenv="@abs_builddir@/procenv"

[ -f "$procenv" ] || die "cannot find binary: $procenv"

#---------------------------------------------------------------------
msg "Ensure $procenv runs with no errors"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv 1>"$stdout" 2>"$stderr"
rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
msg "Ensure --file=<file> works"

out=$(tempfile)
stdout=$(tempfile)
stderr=$(tempfile)
$procenv --file="$out" 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] && die "Unexpected stdout output: $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output: $stderr"
[ -s "$out" ] || die "Expected output in file $out"

rm "$out"
rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
msg "Ensure --output=stdout works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv --output=stdout 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output: $stderr"
rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
msg "Ensure --output=stderr works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv --output=stderr 1>"$stdout" 2>"$stderr"

[ -s "$stderr" ] || die "Expected stderr output in file $stderr"
[ -s "$stdout" ] && die "Unexpected stdout output: $stdout"
rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
msg "Ensure --exec works"

str="hello world"
out=$(tempfile)
stdout=$(tempfile)
stderr=$(tempfile)
$procenv --output=file --file="$out" \
	--exec echo "$str" 1>"$stdout" 2>"$stderr"

[ -s "$out" ] || die "Expected $procenv output in file $out"
[ -s "$stderr" ] && die "Unexpected stderr output in file $stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
result=$(cat "$stdout")

[ "$result" != "$str" ] && die \
	"Expected file $stdout to contain '$str', found '$result'"

rm -f "$stdout" "$stderr" "$out"

#---------------------------------------------------------------------
arg='--format=text'
msg "Ensure '$arg' works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv $arg 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output in file $stdout"

xmlwf "$stdout"

rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
arg='--format=crumb'
msg "Ensure '$arg' works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv $arg 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output in file $stdout"

rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
arg='--format=xml'
msg "Ensure '$arg' works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv $arg 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output in file $stdout"

xmlwf "$stdout"

rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
arg='--format=json'
msg "Ensure '$arg' works"

stdout=$(tempfile)
stderr=$(tempfile)
$procenv $arg 1>"$stdout" 2>"$stderr"

[ -s "$stdout" ] || die "Expected stdout output in file $stdout"
[ -s "$stderr" ] && die "Unexpected stderr output in file $stdout"

json_pp < "$stdout" >/dev/null

rm -f "$stdout" "$stderr"

#---------------------------------------------------------------------
msg "Ensure all documented options produce output"
$procenv --help | grep -- '-[a-zA-Z0-9], --[a-zA-Z][a-zA-Z0-9]*' |\
	cut -d: -f1 | tr ',' '\n' | egrep -v -- '(-h|--help)' |\
	while read arg
do
	stdout=$(tempfile)
	stderr=$(tempfile)

	# No format option
	cmd="$procenv $arg"
	msg "Running '$cmd'"
	eval '$cmd 1>"$stdout" 2>"$stderr"'
	[ -z "$stdout" ] && die "No stdout output running '$cmd'"
	[ -s "$stderr" ] && die "Unexpected stderr output running '$cmd' ($stderr)"
	rm -f "$stdout" "$stderr"

	# Text format
	cmd="$procenv --format=text $arg"
	msg "Running '$cmd'"
	eval '$cmd 1>"$stdout" 2>"$stderr"'
	[ -z "$stdout" ] && die "No stdout output running '$cmd'"
	[ -s "$stderr" ] && die "Unexpected stderr output running '$cmd' ($stderr)"
	rm -f "$stdout" "$stderr"

	# JSON format
	cmd="$procenv --format=json $arg"
	msg "Running '$cmd'"
	eval '$cmd 1>"$stdout" 2>"$stderr"'
	[ -z "$stdout" ] && die "No stdout output running '$cmd'"
	[ -s "$stderr" ] && die "Unexpected stderr output running '$cmd' ($stderr)"
	json_pp < "$stdout" >/dev/null
	rm -f "$stdout" "$stderr"

	# XML format
	cmd="$procenv --format=xml $arg"
	msg "Running '$cmd'"
	eval '$cmd 1>"$stdout" 2>"$stderr"'
	[ -z "$stdout" ] && die "No stdout output running '$cmd'"
	[ -s "$stderr" ] && die "Unexpected stderr output running '$cmd' ($stderr)"
	xmlwf "$stdout"
	rm -f "$stdout" "$stderr"
done

#---------------------------------------------------------------------
